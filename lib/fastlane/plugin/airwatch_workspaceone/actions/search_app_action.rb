require 'fastlane/action'
require_relative '../helper/airwatch_workspaceone_helper'

module Fastlane
  module Actions
    class SearchAppAction < Action

      SEARCH_APP_SUFFIX  = "/API/mam/apps/search?bundleid=%s"

      $is_debug = false
      $app_id_int

      def self.run(params)
        UI.message("The airwatch_workspaceone plugin is working!")

        # check if debug is enabled
        $is_debug = params[:debug]

        if debug
          UI.message("----------------------------------------------")
          UI.message("SearchAppAction debug information")
          UI.message("----------------------------------------------")
          UI.message(" host_url: #{params[:host_url]}")
          UI.message(" aw_tenant_code: #{params[:aw_tenant_code]}")
          UI.message(" b64_encoded_auth: #{params[:b64_encoded_auth]}")
          UI.message(" app_identifier: #{params[:app_identifier]}")
        end

        $host_url               = params[:host_url]
        $aw_tenant_code         = params[:aw_tenant_code]
        $b64_encoded_auth       = params[:b64_encoded_auth]
        app_identifier          = params[:app_identifier]

        UI.message("----------------------------------------------")
        UI.message("App Name:  #{params[:app_identifier]}")

        apps = search_app_versions(app_identifier, $host_url, $aw_tenant_code, $b64_encoded_auth, debug)
        app_versions = apps['Application']

        if app_versions.count <= 0
          UI.user_error!("No app found on the console having bundle identifier: %s" % [app_identifier])
          UI.user_error!("Please provide an existing app identifier")
          exit
        end
        
        UI.message("----------------------------------------------")
        for item in app_versions 
          UI.message("Version: #{item['AppVersion']};  Status: #{item['Status']}; Assigned: #{item['AssignedDeviceCount']}; Installed: #{item['InstalledDeviceCount']}; Not Installed: #{item['NotInstalledDeviceCount']}; Smart Groups: #{item['SmartGroups']}") 
          UI.message("----------------------------------------------")
        end

      end
      
       def self.search_app_versions(app_identifier, host_url, aw_tenant_code, b64_encoded_auth, debug)
        require 'rest-client'
        require 'json'
        
        response = RestClient.get(host_url + SEARCH_APP_SUFFIX % [app_identifier], {accept: :json, 'aw-tenant-code': aw_tenant_code, 'Authorization': "Basic " + b64_encoded_auth})

        if debug
          UI.message("Response code: %d" % [response.code])
          UI.message("Response body:")
          UI.message(JSON.pretty_generate(response.body))
        end

        if response.code != 200
          UI.user_error!("There was an error in finding app versions. One possible reason is that an app with the bundle identifier given does not exist on Console.")
          exit
        end

        json = JSON.parse(response.body)
        return json
      end

      def self.description
        "The main purpose of this action is display details about this application on airwatch."
      end

      def self.authors
        ["Ram Awadhesh Sharan"]
      end

      def self.return_value
        # If your method provides a return value, you can describe here what it does
      end

      def self.details
        # Optional:
        "search application - Displays details about your application in airwatch"
      end

      def self.available_options
        [
          FastlaneCore::ConfigItem.new(key: :host_url,
                                  env_name: "AIRWATCH_HOST_API_URL",
                               description: "Host API URL of the AirWatch/Workspace ONE instance without /API/ at the end",
                                  optional: false,
                                      type: String,
                              verify_block: proc do |value|
                                              UI.user_error!("No AirWatch/Workspace ONE Host API URl given, pass using `host_url: 'https://yourhost.com'`") unless value and !value.empty?
                                            end),

          FastlaneCore::ConfigItem.new(key: :aw_tenant_code,
                                  env_name: "AIRWATCH_API_KEY",
                               description: "API key or the tenant code to access AirWatch/Workspace ONE Rest APIs",
                                  optional: false,
                                      type: String,
                              verify_block: proc do |value|
                                              UI.user_error!("Api tenant code header is missing, pass using `aw_tenant_code: 'yourapikey'`") unless value and !value.empty?
                                            end),

          FastlaneCore::ConfigItem.new(key: :b64_encoded_auth,
                                  env_name: "AIRWATCH_BASE64_ENCODED_BASIC_AUTH_STRING",
                               description: "The base64 encoded Basic Auth string generated by authorizing username and password to the AirWatch/Workspace ONE instance",
                                  optional: false,
                                      type: String,
                              verify_block: proc do |value|
                                              UI.user_error!("The authorization header is empty or the scheme is not basic, pass using `b64_encoded_auth: 'yourb64encodedauthstring'`") unless value and !value.empty?
                                            end),

          FastlaneCore::ConfigItem.new(key: :app_identifier,
                                  env_name: "APP_IDENTIFIER",
                               description: "Bundle identifier of your app",
                                  optional: false,
                                      type: String,
                              verify_block: proc do |value|
                                              UI.user_error!("No app identifier given, pass using `app_identifier: 'com.example.app'`") unless value and !value.empty?
                                            end),

          FastlaneCore::ConfigItem.new(key: :debug,
                                  env_name: "AIRWATCH_DEBUG",
                               description: "Debug flag, set to true to show extended output. default: false",
                                  optional: true,
                                 is_string: false,
                             default_value: false)
        ]
      end

      def self.is_supported?(platform)
        # Adjust this if your plugin only works for a particular platform (iOS vs. Android, for example)
        # See: https://docs.fastlane.tools/advanced/#control-configuration-by-lane-and-by-platform
        #
        [:ios, :android].include?(platform)
        true
      end

      # helpers
      
      def self.debug
        $is_debug
      end

    end
  end
end